# -*- coding: utf-8 -*-
"""projectLeedsButterfly.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/184Wic949VTdSd9fgNyNzpPeVaGkzysrp
"""

from google.colab import drive
drive.mount('/content/drive')

import os
import plotly
import numpy as np
import pandas as pd
import tensorflow as tf
import plotly.express as px
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from tensorflow.keras import layers
from plotly.subplots import make_subplots
from keras.layers import Dense, Dropout, Flatten
from sklearn.metrics import classification_report
from tensorflow.keras.applications.vgg16 import VGG16
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

class_names = pd.read_csv( r'/content/drive/MyDrive/Computer Engineering/dataScienceProject/leedsbutterfly/classesNames.csv')["COMMON NAME"].tolist()
print(class_names)

train_generator = ImageDataGenerator(rescale = 1.0/255)
test_generator = ImageDataGenerator( rescale = 1.0/255 )
valid_generator = ImageDataGenerator( rescale = 1./255. )

train = train_generator.flow_from_directory( "/content/drive/MyDrive/Computer Engineering/dataScienceProject/leedsbutterfly/images/train",
                                             batch_size = 20,
                                             class_mode = 'categorical',
                                             classes=class_names,
                                             target_size = (224, 224))

valid = valid_generator.flow_from_directory( "/content/drive/MyDrive/Computer Engineering/dataScienceProject/leedsbutterfly/images/valid",
                                             batch_size = 20,
                                             class_mode = 'categorical',
                                             classes=class_names,
                                             target_size = (224, 224))

test = test_generator.flow_from_directory( "/content/drive/MyDrive/Computer Engineering/dataScienceProject/leedsbutterfly/images/test",
                                           batch_size = 20,
                                           class_mode = 'categorical',
                                           classes=class_names,
                                           target_size = (224, 224))

img, label = train.next()
rows,cols = 4,4
fig = make_subplots(rows=rows, cols=cols,horizontal_spacing=0.05,subplot_titles=[class_names[np.argmax(label[i])] for i in range(rows*cols)])
indx=0
for i in range(rows):
    for j in range(cols):
        fig.add_trace(px.imshow(img[indx]).data[0],i+1,j+1)
        indx+=1
        fig.update_layout(width=1000,height=1000)
        fig.update_xaxes(showticklabels=False)
        fig.update_yaxes(showticklabels=False)
fig.show()

base_model = VGG16(input_shape = (224, 224, 3), include_top = False, weights = 'imagenet')

for layer in base_model.layers:
    layer.trainable = False

x = layers.Flatten()(base_model.output)
x = layers.Dense(512, activation='relu')(x)
x = layers.Dropout(0.5)(x)
x = layers.Dense(256, activation='relu')(x)
x = layers.Dropout(0.5)(x)
x = layers.Dense(10, activation='softmax')(x)

model = tf.keras.models.Model(base_model.input, x)

model.compile(optimizer = tf.keras.optimizers.Adam(0.0001),
              loss = 'categorical_crossentropy',
              metrics = ['acc'])

model.summary()

callback = EarlyStopping(monitor='val_loss', patience=5)
checkpoint = ModelCheckpoint('butterfly-Image_model_weights.hdf5',
                             monitor='val_loss',
                             verbose=2,
                             save_best_only=True,
                             mode='min')
history = model.fit(train,
                    validation_data = valid,epochs = 40,
                    batch_size=32,
                    callbacks=[callback, checkpoint])

fig = make_subplots(rows=1, cols=2,subplot_titles=("Loss", "Accuracy"))
fig.add_trace(go.Scatter(y=history.history['loss'], mode='lines', name='Train Loss'),1,1)
fig.add_trace(go.Scatter(y=history.history['val_loss'], mode='lines', name='Validation Loss'),1,1)
fig.add_trace(go.Scatter(y=history.history['acc'], mode='lines', name='Train Accuracy'),1,2)
fig.add_trace(go.Scatter(y=history.history['val_acc'],mode='lines', name='Validation Accuracy'),1,2)
fig.update_xaxes(title_text="Epoch", row=1, col=1)
fig.update_xaxes(title_text="Epoch", row=1, col=2)
fig.show()

model.load_weights('butterfly-Image_model_weights.hdf5')

"""# MULTIPLE TEST"""

from PIL import Image
import numpy as np
import tensorflow as tf  # veya başka bir kütüphane, kullanılan kütüphaneye bağlı olarak

def apply_model(image_path):
    model = tf.keras.models.load_model('/content/drive/MyDrive/Computer Engineering/dataScienceProject/newModel/butterfly-Image_model_weights.hdf5')

    img = Image.open(image_path)
    img = img.resize((model.input_shape[1], model.input_shape[2]))

    img_array = np.expand_dims(np.array(img), axis=0)
    img_array = np.expand_dims(np.array(img), axis=0)

    predictions = model.predict(img_array)

    return predictions

image_paths = ['/content/drive/MyDrive/Computer Engineering/dataScienceProject/leedsbutterfly/images/test/American Copper/0050005.png',
               '/content/drive/MyDrive/Computer Engineering/dataScienceProject/leedsbutterfly/images/test/Painted Lady/0100008.png',
               '/content/drive/MyDrive/Computer Engineering/dataScienceProject/leedsbutterfly/images/test/Monarch/0010004.png']

for image_path in image_paths:
    predictions = apply_model(image_path)
    print(f"Predictions for {image_path}: {predictions}")

"""Subfolding operations have been carried out for Valid, Test and train folders. In order for the code block below to provide direct access to the images, a folder named test2 was created and test images were added to this folder without subfolding."""

import os
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf

# Model
model = tf.keras.models.load_model('/content/drive/MyDrive/Computer Engineering/dataScienceProject/newModel/butterfly-Image_model_weights.hdf5')

# Modelin uygulanması ve tahminlerin alınması
def apply_model(image_path):
    img = Image.open(image_path)
    img = img.resize((model.input_shape[1], model.input_shape[2]))
    img_array = np.expand_dims(np.array(img), axis=0)
    predictions = model.predict(img_array)
    return predictions

# Görüntü dizininin bulunduğu path
image_dir = '/content/drive/MyDrive/Computer Engineering/dataScienceProject/leedsbutterfly/images/test2/'

# Dizindeki tüm dosyaları al
image_files = [f for f in os.listdir(image_dir)]

print(image_files)

# Her bir görüntü için tahminlerin alınması ve sınıf adının yazdırılması
for image_file in image_files:
    image_path = os.path.join(image_dir, image_file)
    predictions = apply_model(image_path)
    print(predictions)

    # Tahminlerden maksimum olan indeksi bulun
    predicted_class_index = np.argmax(predictions)

    # Maksimum indeksi kullanarak sınıf adını alın
    predicted_class_name = class_names[predicted_class_index]

    # Orijinal görüntüyü ekrana yazdırın
    img = Image.open(image_path)
    plt.imshow(img)
    plt.title(f"Predicted class: {predicted_class_name}")
    plt.show()

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from plotly.subplots import make_subplots



img, label = test.next()

rows,cols = 4,4
fig = make_subplots(rows=rows, cols=cols,horizontal_spacing=0.05,subplot_titles=[class_names[np.argmax(label[i])] for i in range(rows*cols)])
indx=0
for i in range(rows):
    for j in range(cols):
        fig.add_trace(px.imshow(img[indx]).data[0],i+1,j+1)
        indx+=1
        fig.update_layout(width=1000,height=1000)
        fig.update_xaxes(showticklabels=False)
        fig.update_yaxes(showticklabels=False)
fig.show()